"""
Authentication for private methods of the API (mainly managing deployments)

Implementation notes:
====================
Authentication is implemented using `get_user_infos_from_access_token` instead
of `get_user_infos_from_request` (as done in the FastAPI example in the flaat docs).
There are two advantages of this:
* the main one is that it would enable us enable to take advantage of Swagger's builtin
  Authentication and Authorization [1] in the Swagger interface (generated by FastAPI).
  This is not possible using the `Request` object, as data from `Request` cannot be validated and
  documented by OpenAPI [2].

  [1] https://swagger.io/docs/specification/authentication/
  [2] https://fastapi.tiangolo.com/advanced/using-request-directly/?h=request#details-about-the-request-object

* the decorator `flaat.is_authenticated()` around each function is no longer needed,
  as authentication is checked automatically by `authorization=Depends(security)` without needing extra code.

The curl calls still remain the same, but now in the http://localhost/docs you will see an authorize
 button where you can copy paste your token. So you will be able to access authenticated methods from the interface.
"""

import re

from fastapi import HTTPException
from flaat.fastapi import Flaat

from ai4papi.conf import MAIN_CONF


# Initialize flaat
flaat = Flaat()
flaat.set_trusted_OP_list(MAIN_CONF["auth"]["OP"])


def get_user_info(token):
    try:
        user_infos = flaat.get_user_infos_from_access_token(token)
    except Exception as e:
        raise HTTPException(
            status_code=401,
            detail=str(e),
        )

    # Check output
    if user_infos is None:
        raise HTTPException(
            status_code=401,
            detail="Invalid token",
        )

    # Retrieve VOs the user belongs to
    # VOs can be empty if the user does not belong to any VO, or the
    # 'eduperson_entitlement wasn't correctly retrieved from the token
    vos = []
    for i in user_infos.get("eduperson_entitlement", []):
        # Parse Virtual Organizations manually from URNs
        # If more complexity is need in the future, check https://github.com/oarepo/urnparse
        ent_i = re.search(r"group:(.+?):", i)
        if ent_i:  # your entitlement has indeed a group `tag`
            vos.append(ent_i.group(1))

    # Generate user info dict
    for k in ["sub", "iss", "name", "email"]:
        if user_infos.get(k) is None:
            raise HTTPException(
                status_code=401,
                detail=f"You token should have scopes for {k}.",
            )
    out = {
        "id": user_infos.get("sub"),  # subject, user-ID
        "issuer": user_infos.get("iss"),  # URL of the access token issuer
        "name": user_infos.get("name"),
        "email": user_infos.get("email"),
        "vos": vos,
    }

    return out


def check_vo_membership(
    requested_vo,
    user_vos,
):
    """
    Check that the user has access to the VO he is asking for.
    """
    if requested_vo not in user_vos:
        raise HTTPException(
            status_code=401,
            detail=f"The requested Virtual Organization ({requested_vo}) does not match with any of your available VOs: {user_vos}.",
        )
